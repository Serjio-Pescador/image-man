{"name": "Обзоры матчей пресет=3312", "status": "failed", "statusDetails": {"message": "pytest_image_snapshot.ImageMismatchError: Image does not match the snapshot stored in screenshots/test_review_preset_3312_b5fbbd0c-3fe5-4962-bb61-3bc62bba2a92.png. Use -v or -vv to display diff. Use --image-snapshot-update to update snapshot.", "trace": "self = <letterspacing.TestReviews object at 0x1057caa50>\npage = <Page url='https://pre-static.okko.tv/images/v4/b5fbbd0c-3fe5-4962-bb61-3bc62bba2a92?presetId=3312&width=505&scale=2&quality=80&mediaType=webp'>\nimage_snapshot = <function image_snapshot.<locals>._image_snapshot at 0x105cab740>, review_uuid = 'b5fbbd0c-3fe5-4962-bb61-3bc62bba2a92'\n\n    @allure.title('Обзоры матчей пресет=3312')\n    @pytest.mark.parametrize(\"review_uuid\",\n                             review_for_3312\n                             )\n    def test_review_preset_3312(self, page, image_snapshot, review_uuid):\n    \n        query_tail = \"presetId=3312&width=505&scale=2&quality=80&mediaType=webp\"\n        query_params = parse_qs(query_tail)\n        width = int(query_params['width'][0])\n        if width % 20 != 0:\n            new_width = width + 20 - (width % 20)\n        eql_query_IM = query_params.copy()\n        eql_query_IM['width'] = [str(new_width)]\n    \n        query_tail_im = (\"&\".join(f'{k}={v[0]}' for k, v in eql_query_IM.items()))\n    \n        image_manager_url = f\"{host_url}{review_uuid}?{query_tail_im}\"\n        stat_img_url = f\"{static_url}{review_uuid}?{query_tail}\"\n    \n        page.goto(image_manager_url)\n        response = page.request.get(image_manager_url)\n        if response.status == 429:\n            page.waitFor(2000)\n            page.goto(image_manager_url)\n    \n        expect(response).to_be_ok()\n        make_screenshot(page, img_uuid=review_uuid)\n    \n        page.goto(stat_img_url)\n>       compare_screenshot(page, image_snapshot, img_uuid=review_uuid)\n\ntests/letterspacing.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/letterspacing.py:60: in compare_screenshot\n    image_snapshot(screenshot, f\"./screenshots/{test_name}_{img_uuid}.png\", diff)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nimg = <PIL.PngImagePlugin.PngImageFile image mode=RGB size=1280x720 at 0x10BBB32C0>\nimg_path = PosixPath('screenshots/test_review_preset_3312_b5fbbd0c-3fe5-4962-bb61-3bc62bba2a92.png'), threshold = 0.7\n\n    def _image_snapshot(img, img_path, threshold=None):\n        config = request.config\n        update_snapshots = config.getoption(\"--image-snapshot-update\")\n        fail_if_missing = config.getoption(\"--image-snapshot-fail-if-missing\")\n        save_diff = config.getoption(\"--image-snapshot-save-diff\")\n    \n        img_path = Path(img_path)\n        if not update_snapshots and img_path.exists():\n            src_image = Image.open(img_path)\n            img_1, img_2 = extend_to_match_size(img, src_image)\n            diff = image_diff(img_1, img_2)\n            if diff:\n                if threshold:\n                    try:\n                        from pixelmatch.contrib.PIL import pixelmatch\n                    except ModuleNotFoundError:\n                        raise ModuleNotFoundError(\n                            \"The 'pixelmatch' package is required for tests using the \"\n                            \"'threshold' argument but is not installed. \"\n                            \"Please install it using 'pip install pixelmatch'.\"\n                        )\n    \n                    if threshold is True:\n                        threshold = 0.1\n                    mismatch = pixelmatch(\n                        img_1, img_2, threshold=threshold, fail_fast=True\n                    )\n                    if not mismatch:\n                        return\n                if save_diff:\n                    diff.save(img_path.with_suffix(\".diff\" + img_path.suffix))\n                    img.save(img_path.with_suffix(\".new\" + img_path.suffix))\n                if config.option.verbose:\n                    diff.show(title=\"diff\")\n                    if config.option.verbose > 1:\n                        src_image.show(title=\"original\")\n                        img.show(title=\"new\")\n                verbose_msg = (\n                    \" Use -v or -vv to display diff.\"\n                    if not config.option.verbose\n                    else \"\"\n                )\n                snapshot_update_msg = \" Use --image-snapshot-update to update snapshot.\"\n>               raise ImageMismatchError(\n                    f\"Image does not match the snapshot stored in {img_path}.\"\n                    f\"{verbose_msg}{snapshot_update_msg}\"\n                )\nE               pytest_image_snapshot.ImageMismatchError: Image does not match the snapshot stored in screenshots/test_review_preset_3312_b5fbbd0c-3fe5-4962-bb61-3bc62bba2a92.png. Use -v or -vv to display diff. Use --image-snapshot-update to update snapshot.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pytest_image_snapshot.py:107: ImageMismatchError"}, "parameters": [{"name": "browser_name", "value": "'chromium'"}, {"name": "review_uuid", "value": "'b5fbbd0c-3fe5-4962-bb61-3bc62bba2a92'"}], "start": 1737928935391, "stop": 1737928937293, "uuid": "b7222912-3f60-4615-b99c-5cbdc8b9f25e", "historyId": "5001092263673b097ec13667d500f1e3", "testCaseId": "5705924241a85bbee4bd4f410eb9d19b", "fullName": "tests.letterspacing.TestReviews#test_review_preset_3312", "labels": [{"name": "story", "value": "Обзоры матчей"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "letterspacing"}, {"name": "subSuite", "value": "TestReviews"}, {"name": "host", "value": "MacBook-Air-Rybak.local"}, {"name": "thread", "value": "57461-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.letterspacing"}]}